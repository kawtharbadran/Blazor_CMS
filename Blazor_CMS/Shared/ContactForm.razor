@using Microsoft.AspNetCore.Components.Forms;
@inject IDbContextFactory<ContactContext> DbFactory

<h1>@Mode Contact</h1>
<hr />
@if (Contact != null)
{
<EditForm Model="@Contact"
          OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    
    <!--Must add these two for showing error messages of contact fields-->
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h2>Name</h2>
    <p>

        <label>
            Last Name:
            <InputText @bind-Value="Contact.LastName" />
        </label>
    </p>
    <p>
        <label>
            First Name:
            <InputText @bind-Value="Contact.FirstName" />
        </label>
    </p>
    <h2>Birth Date</h2>
    <p>
        <label>
            Birth Date (optional):
            <InputDate @bind-Value="Contact.BirthDate" />
        </label>

    </p>
    <h2>Phone</h2>
    <p>
        <label>
            Phone Number (optional):
            <InputText @bind-Value="Contact.PhoneNumber" />
        </label>
    </p>
    <br />

    <!--Only show delete option if editing/viewing-->
    @if (Mode.Equals("Edit"))
    {
<button disabled="@Busy" class="btn btn-danger" type="button"
        @onclick="e => IsModalOpened = true">
    Delete
</button> <!--Display confirmation modal for deleting the contact-->
                        <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))"
                                      IsModalOpened=@IsModalOpened>
                        </DeletePrompt>}

    <button disabled="@Busy" class="btn btn-warning"
            @onclick="CancelAsync">
        Cancel
    </button>&nbsp;
    <button disabled="@Busy" type="submit"
            class="btn btn-primary">
        Save
    </button>
</EditForm>}

@code
{ // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Contact to insert.
    [Parameter]
    public Contact Contact { get; set; }

    // The database version of Contactif a concurrency issue exists.
    [Parameter]
    public Contact DbContact { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // To open the confirmation modal when the delete button is clicked
    public bool IsModalOpened { get; set; }

    // Mode
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel, returns a Task
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request
    // parameter isValid True when field validation passed, returns a Task
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }

    // Confirm deletion
    // parameter result true if user confirmed
    private async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
    }

    // Deletes the contact.
    private async Task DeleteAsync()
    {
        if (Busy)
        {
            return; // avoid concurrent requests
        }

        Busy = true;
        using var context = DbFactory.CreateDbContext();
        var contact = await context.Contacts
            .SingleOrDefaultAsync(c => c.Id == Contact.Id);
        if (contact != null)
        {
            context.Contacts.Remove(contact);
            await context.SaveChangesAsync();
            Busy = false;
        }
        else
        {
            return;
        }
    }

}